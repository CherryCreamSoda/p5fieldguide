<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="38">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"RPCS3 PS3 Memory Base Address"</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Byte</VariableType>
      <Address>300000000</Address>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>
  
if process == nil then
  return 0
end

g_base = getAddress( process )
g_vmBase = 0x300000000 --RPCS3 duplicates virtual mem at 0x4 and I genuinely don't know why???
g_recordIds = {}
g_recordDescs = {}

function translateValueType( vtype ) --Shoutouts to TGE for the crusty type definition code. 
  if     vtype == 's8' then return vtByte, nil, true
  elseif vtype == 'u8' then return vtByte, nil, false
  elseif vtype == 'u16LE' then return vtWord, nil, false
  elseif vtype == 's16LE' then return vtWord, nil, true
  elseif vtype == 'u32LE' then return vtDword, nil, false
  elseif vtype == 's32LE' then return vtDword, nil, true
  elseif vtype == 'f32LE' then return vtSingle, nil, true
  elseif vtype == 'u16'   then return vtCustom, "2 Byte Big Endian", false
  elseif vtype == 's16'   then return vtCustom, "2 Byte Big Endian", true
  elseif vtype == 'u32'   then return vtCustom, "4 Byte Big Endian", false
  elseif vtype == 's32'   then return vtCustom, "4 Byte Big Endian", true
  elseif vtype == 'f32'   then return vtCustom, "Float Big Endian", true
  elseif vtype == nil then
     return vtByte, nil, false
  else
     return vtype, nil, false
  end
end

function clearAddressListAll()
  for i=getAddressList().getCount(),0,-1 do
      local record = getAddressList().getMemoryRecord(i)
      if record ~= nil then
         record.destroy()
      end
  end
end

function clearAddressListOwned()
  for _,v in pairs( g_recordIds ) do
    local mr = getAddressList().getMemoryRecordByID(v)
    if mr~=nil then mr.delete() end
  end

  g_recordIds = {}
end

function tableContains(table, element)
  for _, value in pairs(table) do
    if value == element then
      return true
    end
  end
  return false
end

function createRecord( addr, desc, vtype, hex, parent )
  local record = getAddressList().getMemoryRecordByDescription( desc )
  if record == nil then
    record = getAddressList().createMemoryRecord()
    if parent ~= nil then
      record.appendToEntry( parent )
    end
  end
  table.insert( g_recordIds, record.ID )
  record.setAddress( addr )
  record.setDescription( desc )

  local ceType, customTypeName, isSigned = translateValueType( vtype )
  record.Type = ceType
  record.CustomTypeName = customTypeName
  record.ShowAsHex = hex
  record.ShowAsSigned = isSigned
  return record
end

function createVMRecord( addr, desc, vtype, hex, parent )
  return createRecord( g_vmBase + addr, desc, vtype, hex, parent )
end

function getValue( record )
  if record.ShowAsHex then
     return tonumber( record.Value, 16 )
  else
     return tonumber( record.Value )
  end
end

function createRGBARecord( addr, desc, vtype, parent )
  r = createVMRecord( addr + 0x00, desc .. " R", vtype, false, parent )
  g = createVMRecord( addr + 0x04, desc .. " G", vtype, false, parent )
  b = createVMRecord( addr + 0x08, desc .. " B", vtype, false, parent )
  a = createVMRecord( addr + 0x0C, desc .. " A", vtype, false, parent )
  return r, g, b, a
end
clearAddressListAll()

--=======================================================================================
--=======================================================================================   RANDOM BULLSHIT GO!!!!!!!
--=======================================================================================

function update()
  if process == nil then
     return 0
  end

function isValidPointer( p )
  return p ~= 0 and p ~= nil
end
  
  --You might judge my INCREDIBLY strange formatting here but don't. I basically autogenerated this with regex and an excel spreadsheet and I don't care enough to fix it!
  
  g_base = getAddress(              process                                                                                       )
  g_vmBase =                        0x300000000
  vm = createRecord(                0x300000000               , "RPCS3 PS3 Memory Base Address" , nil   , true , nil              )
  ppWorkDataArray = createVMRecord( 0x010dd540                , "Work Data Array Pointer"       , "u32" , true , vm               )
  pWorkDataArray = getValue( ppWorkDataArray )

  if not isValidPointer( pWorkDataArray ) then return end

  ppFwk = createVMRecord(           pWorkDataArray + 0x34     , "Field Work Data Pointer"       , "u32" , true  , ppWorkDataArray )
  pFwk = getValue(                  ppFwk                                                                                         )

  --Strictly speaking I don't NEEEEEED the Field Work Data pointer... but it might be useful for later?

  if not isValidPointer( pFwk ) then return end
  
  fwk = createVMRecord(             pFwk                      , "Field Work Data"               , nil   , true  , ppFwk           )
  pGlobalData =                     0x1182C30 --No but seriously how did TGE find this fucking thing
  GlobalData = createVMRecord(      pGlobalData               , "Global Data"                   , nil   , true  , vm              )
  
  ppGraphicsData = createVMRecord(  pGlobalData    + 0x34     , "Graphics Data Pointer"         , "u32" , true  , GlobalData      )
  pGraphicsData = getValue(         ppGraphicsData                                                                                )
  GraphicsData = createVMRecord(    pGraphicsData             , "Graphics Data"                 , nil   , true  , ppGraphicsData  )
  
  createVMRecord(                   pGlobalData    + 0xA48    , "Wall Fog Near Culling"         , "f32" , false , GraphicsData    )
  createVMRecord(                   pGlobalData    + 0xA4C    , "Wall Fog Far Culling"          , "f32" , false , GraphicsData    )
  createRGBARecord(                 pGlobalData    + 0xA58    , "Wall Fog Color"                , "f32" ,         GraphicsData    )  
  
  createVMRecord(                   pGlobalData    + 0xACC    , "Color Grading Cyan"            , "f32" , false , GraphicsData    )
  createVMRecord(                   pGlobalData    + 0xAD0    , "Color Grading Magenta"         , "f32" , false , GraphicsData    )
  createVMRecord(                   pGlobalData    + 0xAD4    , "Color Grading Yellow"          , "f32" , false , GraphicsData    )
  createVMRecord(                   pGlobalData    + 0xAD8    , "Color Grading Dodge"           , "f32" , false , GraphicsData    )
  createVMRecord(                   pGlobalData    + 0xADC    , "Color Grading Burn"            , "f32" , false , GraphicsData    )

  createVMRecord(                   pGlobalData    + 0xB08    , "Floor Fog Upper Bound"         , "f32" , false , GraphicsData    )
  createVMRecord(                   pGlobalData    + 0xB0C    , "Floor Fog Lower Bound"         , "f32" , false , GraphicsData    )
  createRGBARecord(                 pGlobalData    + 0xB10    , "Floor Fog Color"               , "f32" ,         GraphicsData    )  
  
  ppFldMdlData = createVMRecord(    pGraphicsData  + 0x10     , "Field Model Pointer"           , "u32" , true  , GraphicsData    )
  pFldMdlData = getValue(           ppFldMdlData                                                                                  )
  FldMdlData = createVMRecord(      pFldMdlData               , "Field Model Section"           , nil   , true  , ppFldMdlData    )
  createVMRecord(                   pFldMdlData    + 0x20     , "Field Lighting X"              , "f32" , false , FldMdlData      )
  createVMRecord(                   pFldMdlData    + 0x24     , "Field Lighting Y"              , "f32" , false , FldMdlData      )
  createVMRecord(                   pFldMdlData    + 0x28     , "Field Lighting Z"              , "f32" , false , FldMdlData      )
  createRGBARecord(                 pFldMdlData    + 0x30     , "Field Model Diffuse"           , "f32" ,         FldMdlData      )
  createRGBARecord(                 pFldMdlData    + 0x40     , "Field Model Ambient"           , "f32" ,         FldMdlData      )
  createRGBARecord(                 pFldMdlData    + 0x60     , "Field Model Specular"          , "f32" ,         FldMdlData      )
  createRGBARecord(                 pFldMdlData    + 0x70     , "Field Model Emissive"          , "f32" ,         FldMdlData      )

  createVMRecord(                   pGraphicsData  + 0x2A0    , "Model Near Culling"            , "f32" , false , GlobalData      )
  createVMRecord(                   pGraphicsData  + 0x2A4    , "Model Far Culling"             , "f32" , false , GlobalData      )

  ppChrMdlData = createVMRecord(    pGraphicsData  + 0x20     , "Character Model Pointer"       , "u32" , true  , GraphicsData    )
  pChrMdlData = getValue(           ppChrMdlData                                                                                  )
  ChrMdlData = createVMRecord(      pChrMdlData               , "Character Model Section"       , nil   , true  , ppChrMdlData    )
  createVMRecord(                   pChrMdlData    + 0x20     , "Character Lighting X"          , "f32" , false , ChrMdlData      )
  createVMRecord(                   pChrMdlData    + 0x24     , "Character Lighting Y"          , "f32" , false , ChrMdlData      )
  createVMRecord(                   pChrMdlData    + 0x28     , "Character Lighting Z"          , "f32" , false , ChrMdlData      )
  createRGBARecord(                 pChrMdlData    + 0x30     , "Character Model Diffuse"       , "f32" ,         ChrMdlData      )
  createRGBARecord(                 pChrMdlData    + 0x40     , "Character Model Ambient"       , "f32" ,         ChrMdlData      )
  createRGBARecord(                 pChrMdlData    + 0x60     , "Character Model Specular"      , "f32" ,         ChrMdlData      )
  createRGBARecord(                 pChrMdlData    + 0x70     , "Character Model Emissive"      , "f32" ,         ChrMdlData      )

end


clearAddressListOwned() --stopgap to prevent some weird overflows and bugs when using the trackbars before the game is loaded

timer = createTimer(getMainForm())
timer.Interval = 1000
timer.OnTimer = function(timer)
  -- code setting done state.
  if DoneState == true then
    timer.destroy()
  end

  if pcall(update) then
    -- no errors
  else
    -- Kill the timer when things aren't responding. Helps to stop spamming log when the game crashes or something.
    timer.destroy()
  end
end
</LuaScript>
</CheatTable>
